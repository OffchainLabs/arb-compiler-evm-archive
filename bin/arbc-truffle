#!/usr/bin/env python3

import argparse
import json
import pkg_resources

from arbitrum.evm.contract import Contract, create_evm_vm
from arbitrum.marshall import marshall_vm_json

NAME = "arb-compiler-evm"
__version__ = pkg_resources.require(NAME)[0].version


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "input_file", help="Json file generated with evm code produced by truffle"
    )
    parser.add_argument("output_file", help="File location to save produced AVM binary")
    parser.add_argument(
        "-d",
        "--debug-output",
        type=str,
        help="File location to save produced debug output",
    )
    parser.add_argument(
        "--optimize-off",
        help="Don't perform any optimization in the compiler",
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "--version", action="version", version="%(prog)s " + __version__
    )
    args = parser.parse_args()

    with open(args.input_file) as json_file:
        raw_contracts = json.load(json_file)

    contracts = [Contract(contract) for contract in raw_contracts if "code" in contract]
    vm = create_evm_vm(contracts, not args.optimize_off)

    with open(args.output_file, "w") as outfile:
        json.dump(marshall_vm_json(vm), outfile)

    print("Successfully created VM")

    if args.debug_output:
        with open(args.debug_output, "w") as f:
            for instr in vm.code:
                f.write("{} {}".format(instr, instr.path))
                f.write("\n")


if __name__ == "__main__":
    main()
